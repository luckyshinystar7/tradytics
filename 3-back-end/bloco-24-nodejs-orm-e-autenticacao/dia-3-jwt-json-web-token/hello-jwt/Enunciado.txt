Agora, a prÃ¡tica
Antes de comeÃ§ar, crie um novo projeto chamadoÂ hello-jwtÂ utilizando o comandoÂ npm init @tryber/backend hello-jwt, aceitando as opÃ§Ãµes padrÃ£o.
    1. ğŸš€ Crie umÂ endpointÂ POST /login.
        â—¦ OÂ endpointÂ deve receber os seguintes dados no corpo da requisiÃ§Ã£o:
    {
      "username": "algumNomeDeUsuario",
      "password": "algumaSenha"
    }
- Caso `username` e `password` sejam vÃ¡lidos, retorne um _token_ que atenda Ã s seguintes especificaÃ§Ãµes:
  - Expira em uma hora;
  - ContÃ©m, no _payload_, o nome de usuÃ¡rio informado na _request_;
  - ContÃ©m, no _payload_, uma propriedade `admin`, com o valor `false`.
- Para retornar o _token_, utilize o seguinte formato no corpo da resposta:
    {
      "token": "<JWT aqui>"
    }
- Para que `username` seja vÃ¡lido, seu valor precisa ser uma _string_ alfanumÃ©rica de, pelo menos, 5 caracteres.
- Para que `password` seja vÃ¡lido, seu valor precisa ser uma _string_ de, pelo menos, 5 caracteres.
    2. ğŸš€ Altere oÂ endpointÂ POST /login:
        â—¦ CasoÂ usernameÂ sejaÂ adminÂ eÂ passwordÂ sejaÂ s3nh4S3gur4???, a chaveÂ adminÂ noÂ payloadÂ doÂ tokenÂ gerado deve ter o valorÂ true.
    3. ğŸš€ Crie oÂ endpointÂ /GET /users/me:
        â—¦ OÂ endpointÂ sÃ³ pode ser acessado por pessoas autenticadas.
        â—¦ Para realizar a autenticaÃ§Ã£o, a requisiÃ§Ã£o deve conter oÂ headerÂ Authorization, cujo valor deve ser umÂ tokenÂ vÃ¡lido.
        â—¦ Caso oÂ tokenÂ nÃ£o exista, retorne o statusÂ 401 Unauthorized, com o seguinte corpo da resposta:
    {
      "error": {
        "message": "Token not found"
      }
    }
4. Caso aconteÃ§a um erro ao validar o _token_, retorne o status `401 Unauthorized` com o seguinte conteÃºdo no corpo:
    {
      "error": {
      "message": "<mensagem de erro da biblioteca>"
      }
    }
5. Caso o _token_ seja vÃ¡lido, retorne o status `200 OK` e, no corpo da resposta, o nome de usuÃ¡rio ao qual aquele _token_ pertence e o valor da propriedade `admin`, no seguinte formato:
    {
      "username": "nome de usuÃ¡rio do token",
      "admin": true || false
    }
6. Utilize um _middleware_ exclusivo para a autenticaÃ§Ã£o. Armazene-o no arquivo `middlewares/auth.js`.
    4. ğŸš€ Crie oÂ endpointÂ /GET /top-secret.
        â—¦ OÂ endpointÂ sÃ³ pode ser acessado por pessoas autenticadas.
        â—¦ ApenasÂ tokensÂ contendo, noÂ payload, a propriedadeÂ adminÂ com o valorÂ trueÂ tÃªm autorizaÃ§Ã£o para acessar esseÂ endpoint.
        â—¦ Caso oÂ tokenÂ nÃ£o exista, retorne o statusÂ 401 Unauthorized, com o seguinte corpo da resposta:
    {
      "error": {
        "message": "Token not found"
      }
    }
- Caso aconteÃ§a um erro ao validar o _token_, retorne o status `401 Unauthorized` com o seguinte conteÃºdo no corpo:
    {
      "error": {
      "message": "<mensagem de erro da biblioteca>"
      }
    }
- Caso o _token_ seja vÃ¡lido, mas a propriedade `admin` do _payload_ nÃ£o seja `true`, retorne o status `403 Forbidden` e o seguinte JSON:
    {
      "error": {
        "message": "Restricted access"
      }
    }
- Caso o _token_ seja vÃ¡lido e o _payload_ contenha `admin` com o valor `true`, retorne o seguinte JSON:
    {
      "secretInfo": "Peter Parker Ã© o Homem-Arannha"
    }
- Para validar se a pessoa Ã© admin, crie um novo _middleware_ no arquivo `middlewares/admin.js`.
