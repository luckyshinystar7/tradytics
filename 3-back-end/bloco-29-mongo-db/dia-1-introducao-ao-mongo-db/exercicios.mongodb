// Utilizando a cole√ß√£o bios, construa queries para retornar os seguintes itens:
// bios collection-> https://www.mongodb.com/docs/manual/reference/bios-example-collection/

// Exerc√≠cio 1: Retorne o documento com o _id igual a 8.
db.bios.find({_id: 8})

// Exerc√≠cio 2: Retorne o documento com o _id igual a 8, mas s√≥ exiba os atributos: _id e name.
db.bios.find({_id: 8}, {name: true})

// üöÄ Exerc√≠cio 3: Retorne apenas os atributos name e birth do documento com o _id igual a 8.
db.bios.find({_id: 8}, {name: true, birth: 1})

// Exerc√≠cio 4: Retorne todos os documentos em que o atributo name.first seja igual a John, utilizando o m√©todo pretty().
db.bios.find({'name.first': 'John'}).pretty()

// Exerc√≠cio 5: Retorne os 3 primeiros documentos da cole√ß√£o bios utilizando o m√©todo pretty().
db.bios.find().limit(3).pretty()

// Exerc√≠cio 6: Retorne 2 documentos da cole√ß√£o bios pulando os 5 primeiros documentos.
db.bios.find().limit(2).skip(5)

// Utilizando o mongoimport, importe o arquivo books.json para a sua inst√¢ncia local do MongoDB e utilize a cole√ß√£o books para construir as seguintes consultas:
// importando banco em 2 passos:
// 1- copiando o json para dentro da pasta tmp do docker
// docker cp books.json mongo_db:/tmp/books.json

// 2- importando com o mongoimport
// docker exec mongo_db mongoimport -d class -c books --file /tmp/books.json

// üöÄ Exerc√≠cio 7: Retorne a quantidade de documentos da cole√ß√£o books.
show databases
use class
db.books.countDocuments()

// üöÄ Exerc√≠cio 8: Conte quantos livros existem com o status = "PUBLISH".
db.books.countDocuments({'status': 'PUBLISH'})

// üöÄ Exerc√≠cio 9: Exiba os atributos title, isbn e pageCount dos 3 primeiros livros. N√ÉO retorne o atributo _id.
db.books.find({}, {title:1, isbn:1, pageCount:1, _id:0}).limit(3)

// Exerc√≠cio 10: Pule 5 documentos e exiba os atributos _id, title, authors e status dos livros com o status = "MEAP", limitando-se a 10 documentos.
