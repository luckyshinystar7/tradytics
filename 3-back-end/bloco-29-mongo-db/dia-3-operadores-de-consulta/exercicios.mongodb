// Utilizando a collection movies faÃ§a os exercÃ­cios a seguir:
    
    // 1. Utilizando o operadorÂ $all, retorne todos os filmes que contenhamÂ actionÂ eÂ adventureÂ noÂ arrayÂ category.
    db.movies.find({category: {
      $all: [
        'action', 'adventure'
      ]
    }});

    
    // 2. ğŸš€ Agora retorne os filmes que contenhamÂ actionÂ eÂ sci-fiÂ noÂ arrayÂ categoryÂ e possuem nota doÂ IMDBÂ maior do queÂ 7.
    db.movies.find({
      $and: [
        {category: {
          $all: [
            'action', 'sci-fi'
          ]
        }},
        {'imdbRating': {$gt: 7}}
      ]
    });
    
    // 3. Retorne todos os filmes comÂ ratingsÂ maior do queÂ 103, exibindo apenas os camposÂ titleÂ eÂ ratings.
    db.movies.find({'ratings': {
      $elemMatch: {
        $gt: 103
      }
    }},
    {'title': 1, 'ratings': 1, '_id': 0})
    
    // 4. ğŸš€ Retorne todos os filmes comÂ ratingsÂ entreÂ 100Â eÂ 105, exibindo apenas os camposÂ titleÂ eÂ ratings.
    db.movies.find({'ratings': {
      $elemMatch: {
        $gte: 100,
        $lt: 105
      }
    }},
    {'title': 1, 'ratings': 1, '_id': 0})
    
    // 5. ğŸš€ Retorne todos os filmes comÂ ratingsÂ entreÂ 64Â eÂ 105Â e divisÃ­veis porÂ 9, exibindo apenas os camposÂ titleÂ eÂ ratings.
    db.movies.find({'ratings': {
      $elemMatch: {
        $gte: 64,
        $lt: 105,
        $mod: [9, 0]
      }
    }},
    {'title': 1, 'ratings': 1, '_id': 0})
    
    // 6. Retorne os filmes da categoriaÂ adventureÂ e comÂ ratingsÂ maior do queÂ 103, exibindo apenas os camposÂ title,Â ratingsÂ eÂ category.
    db.movies.find({'category': 'adventure', 'ratings': {
      $elemMatch: {
        $gt: 103
      }
    }},
    {'title': 1, 'ratings': 1, 'category':1, '_id': 0})
    
    // 7. Retorne somente o tÃ­tulo de todos os filmes com dois elementos noÂ arrayÂ category.
    db.movies.find({
      'category': {
        $size: 2
      }
    },
    {'title': true, '_id': false });
    
    // 8. ğŸš€ Retorne somente o tÃ­tulo de todos os filmes com quatro elementos noÂ arrayÂ ratings.
    db.movies.find({
      'ratings': {
        $size: 4
      }
    },
    {'title': true, '_id': false });
    
    // 9. Busque os filmes em que o mÃ³dulo 5 do campoÂ budgetÂ seja 0 e que o arrayÂ categoryÂ tenha tamanhoÂ 2.
    db.movies.find({
      budget: {$mod: [5, 0]},
      category: {$size: 2 }
    });
    
    // 10. ğŸš€ Retorne os filmes da categoriaÂ "sci-fi"Â ou que possua oÂ ratingsÂ maior do queÂ 199, exibindo apenas os camposÂ title,Â ratingsÂ eÂ category.
    db.movies.find({$or: [
      {'category': 'sci-fi'},
      {'ratings': {$gt: 199}}
    ]},
    {'title': 1, 'ratings': 1, 'category':1, '_id': 0});
    
    // 11. Retorne os filmes em que oÂ ratingsÂ possua tamanho 4 e que seja daÂ categoryÂ "adventure"Â ouÂ "family", mas que nÃ£o tenha oÂ imdbRatingÂ menor que 7.
    db.movies.find({$and: [
      {'ratings': {$size: 4}},
      {$or: [
        {'category': 'adventure'},
        {'category': 'family'}
      ]},
      {'imdbRating': {$gte: 7}},
    ]});

    //outra soluÃ§Ã£o
    db.movies.find({$and: [
      {'ratings': {$size: 4}},
      {'category': {$in: ['adventure', 'family']}},
      {'imdbRating': {$gte: 7}},
    ]});

    // 12. ğŸš€ Utilizando o operadorÂ $regex, retorne todos os filmes em que a descriÃ§Ã£o comece com a palavraÂ "The".
    db.movies.find({'description': {$regex: /^The/}})
    
    // 13. Utilizando o operadorÂ $regex, retorne todos os filmes em que a descriÃ§Ã£o termine com a palavraÂ "humanity.".

